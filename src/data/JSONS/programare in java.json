[{"question": " Fie urm\u0103toarea clas\u0103 Java:\n\n  class C {\n    int a;\n    float x;\n    boolean b;\n  }\n\nStabili\u0163i care dintre urm\u0103toarele linii de cod este corect\u0103:\n\n", "answers": [" C ob = new C(1);\n", " C ob = new C(1, 1.0);\n", " C ob = new C();\n", " C ob = new C(1, 1.0, true);\n"], "correct_answers": [2]}, {"question": " Fie urm\u0103torul program Java:\n\n  class C {\n    public static int a = 1;\n  }\n\npublic class test {\n  public static void main(String[] args) {\n    C ob = new C();\n    C.a++;\n    ob.a++;\n    System.out.println(C.a);\n  }\n}\n\nDup\u0103 executarea programului, va fi afi\u015fat\u0103 valoarea:\n\n", "answers": [" 3\n", " 2\n", " 1\n", " nicio valoare, se ob\u021bine o eroare la executare.\n"], "correct_answers": [0]}, {"question": " Fie urm\u0103torul program Java:\n  class C {\n    public static int a = 1;\n  }\npublic class teste_grila {\n  public static void main(String[] args) {\n    C ob1 = new C();\n    C ob2 = new C();\n\n    ob1.a++;\n    System.out.println(ob2.a);\n  }\n}\n\nDup\u0103 executarea programului, va fi afi\u015fat\u0103 valoarea:\n\n", "answers": [" 0;\n", " 2;\n", " 1;\n", " nicio valoare, se ob\u021bine o eroare la executare.\n"], "correct_answers": [1]}, {"question": " Un program Test scris \u00een limbajul Java poate fi compilat folosind comanda:\n\n", "answers": [" javac Test\n", " java Test.java\n", " javac Test.class\n", " javac Test.java\n"], "correct_answers": [3]}, {"question": " Un program Test scris \u00een limbajul Java \u015fi compilat, poate fi rulat folosind comanda:\n\n", "answers": [" javac Test.java\n", " java Test\n", " java Test.class\n", " java Test.java\n"], "correct_answers": [1]}, {"question": " \u00cen Java o clas\u0103 poate extinde:\n\n", "answers": [" cel mult o interfa\u0163\u0103\n", " oric\u00e2te clase\n", " cel mult o clas\u0103\n", " oric\u00e2te interfe\u0163e\n"], "correct_answers": [2]}, {"question": " \u00cen Java o interfa\u0163\u0103 poate extinde:\n\n", "answers": [" cel mult o interfat\u0103\n", " oric\u00e2te interfe\u0163e\n", " cel mult o clas\u0103\n", " oric\u00e2te clase\n"], "correct_answers": [1]}, {"question": " \u00cen Java o clas\u0103 poate implementa:\n\n", "answers": [" o clas\u0103\n", " oric\u00e2te clase\n", " o interfa\u0163\u0103\n", " oric\u00e2te interfe\u0163e\n"], "correct_answers": [3]}, {"question": " Fie urm\u0103torul program Java:\n\n  class A {\n    public A() {\n      System.out.print(\"A\");\n    }\n\n  }\n\nclass B extends A {\n  public B() {\n    System.out.print(\"B\");\n  }\n}\n\nclass C extends B {\n  public C() {\n    System.out.println(\"C\");\n  }\n}\n\npublic class test {\n  public static void main(String[] args) {\n    C ob = new C();\n  }\n}\n\nDup\u0103 executarea programului, se va afi\u015fa:\n\n", "answers": [" A B C\n", " A\n", " C B A\n", " C\n"], "correct_answers": [0]}, {"question": " Fie urm\u0103torul program Java:\n\n  class A {\n    public int x = 1;\n    public A() {\n      x++;\n    }\n  }\n\nclass B extends A {\n  public B() {\n    x++;\n  }\n}\n\nclass C extends B {\n  public int x = 1;\n  public C() {\n    x++;\n  }\n}\n\npublic class test {\n  public static void main(String[] args) {\n    B b = new B();\n    C c = new C();\n\n    System.out.println(b.x + \" \" + c.x);\n  }\n}\n\nDup\u0103 executarea programului, se va afi\u015fa:\n\n", "answers": [" 3 4\n", " 3 2\n", " 2 2\n", " 3 3\n"], "correct_answers": [1]}, {"question": " Fie urm\u0103torul program Java:\n\n  class A {\n    int x = 0;\n    public A(int n) {\n      x = n;\n    }\n  }\n\nclass B extends A {\n  int x = 1;\n  public B(int n) {\n    super(n);\n  }\n}\n\npublic class test {\n  public static void main(String[] args) {\n    A a = new A(5);\n    B b = new B(7);\n    System.out.println(a.x + \" \" + b.x);\n  }\n}\n\nDup\u0103 executarea programului, se va afi\u015fa:\n\n", "answers": [" 05\n", " 51\n", " 57\n", " 01\n"], "correct_answers": [1]}, {"question": " Fie urm\u0103torul program Java:\n\n  class A {\n    static void staticMethod() {\n      System.out.println(\"Metoda statica\");\n    }\n  }\npublic class Test {\n  public static void main(String[] args) {\n\n    A a = null;\n    a.staticMethod();\n  }\n}\nDup\u0103 executarea programului, se va afi\u015fa:\n\n", "answers": [" programul afi\u0219eaz\u0103 mesajul Metoda statica\n", " se ob\u021bine o eroare la compliare cauzat\u0103 de faptul ca o metod\u0103 static\u0103 nu poate fi invocat\u0103 folosind o referint\u0103\n", " se ob\u021bine la executare excep\u021bia java.lang.NullPointerException\n"], "correct_answers": []}, {"question": " Program urm\u0103tor:\n  class A {\n    int x = 10;\n    static int y = 20;\n  }\nclass B extends A {\n  int x = 30;\n  static int y = 40;\n}\npublic class Test {\n  public static void main(String[] args) {\n    A ob = new B();\n    System.out.println(ob.x + \" \" + ob.y);\n  }\n}\nAfi\u0219eaz\u0103\n", "answers": [" 10 20\n", " 30 40\n", " 30 20\n", " eroare la executare\n"], "correct_answers": [0]}, {"question": " Care dintre urm\u0103toarele afirma\u021bii este adev\u0103rat\u0103 pentru o metod\u0103 de tip final ?\n\n", "answers": [" poate fi \u0219i suprascris\u0103 \u0219i supra\u00eenc\u0103rcat\u0103\n", " poate fi suprascris\u0103, dar nu poate fi supra\u00eenc\u0103rcat\u0103\n", " nu poate fi nici suprascris\u0103 \u0219i nici supra\u00eenc\u0103rcat\u0103\n", " nu poate fi suprascris\u0103, dar poate fi supra\u00eenc\u0103rcat\u0103\n"], "correct_answers": []}, {"question": " Programul urm\u0103tor:\n\n  public class Test {\n    static void test(int a[]) {\n      a[0] = 100;\n\n      a = new int[] {\n        10,\n        20,\n        30,\n        40,\n        50\n      };\n      a[1] = 200;\n      System.out.println(Arrays.toString(a));\n    }\n\n    public static void main(String[] args) {\n      int[] v = {\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n      };\n      test(v);\n      System.out.println(Arrays.toString(v));\n    }\n  }\nAfi\u0219eaz\u0103\n\n", "answers": ["[10, 200, 30, 40, 50]\n[1 2, 3, 4, 5, 6, 7]\n", " [10, 200, 30, 40, 50]\n  [100, 2, 3, 4, 5, 6, 7]\n", "[10, 20, 30, 40, 50]\n[100, 2, 3, 4, 5, 6, 7]\n", "[10, 20, 30, 40, 50]\n[100, 2, 3, 4, 5, 6, 7]\n"], "correct_answers": [1]}, {"question": " Consider\u0103m urm\u0103torul program Java:\n\n  class C {\n    int a, b;\n    public C(int x, int y) {\n      a = x;\n      b = y;\n    }\n    void f() {\n      if (a < b) {\n        a++;\n        b--;\n        g();\n      }\n    }\n\n    void g() {\n      if (b >= a) {\n        a++;\n        b--;\n        f();\n      }\n    }\n\n    void afisare() {\n      System.out.println(a + \" \" + b);\n    }\n  }\n\npublic class teste_grila {\n  public static void main(String[] args) {\n    C ob = new C(2, 10);\n    ob.f();\n    ob.g();\n    ob.afisare();\n  }\n}\n\nDup\u0103 executarea programului, pe ecran se va afi\u015fa:\n\n", "answers": [" 57\n", " 6 6\n", " 2 10\n", " 7 5\n"], "correct_answers": [3]}, {"question": " Consider\u0103m urm\u0103torul program Java:\n\n  class C {\n    static int x = 0;\n    static int f() {\n      return (++x) * (x--);\n    }\n  }\n\npublic class teste_grila {\n  public static void main(String[] args) {\n    System.out.println(C.f() + \" \" + C.f() + \" \" + C.f());\n  }\n}\n\nDup\u0103 executarea programului, pe ecran se va afi\u015fa:\n\n", "answers": [" 1 1 1\n", " 1 2 3\n", " 1 2 6\n", " 0 0 0\n"], "correct_answers": [0]}, {"question": " Consider\u0103m urm\u0103torul program Java:\n\n  class C {\n    static int x = 0;\n    static void f() {\n      x = (++x) * (x--);\n      System.out.print(x + \" \");\n    }\n  }\n\npublic class teste_grila {\n  public static void main(String[] args) {\n    C.f();\n    C.f();\n    C.f();\n  }\n}\n\nDup\u0103 executarea programului, pe ecran se va afi\u015fa:\n\n", "answers": [" 0 0 0\n", " 1 4 25\n", " 1 - 1 1\n", " 2 4 16\n"], "correct_answers": [1]}, {"question": " Un fir de execu\u0163ie poate intra \u00een starea \"blocat\"(blocked) astfel:\n\n", "answers": [" prin apelul metodei sleep();\n", " automat de c\u0103tre sistemul de operare;\n", " prin apelul metodei block();\n", " prin apelul metodei wait().\n"], "correct_answers": [0, 3]}, {"question": " Fie urm\u0103torul program Java:\n\n  class Fir implements Runnable {\n    int x;\n    public Fir(int x) {\n      this.x = x;\n    }\n    public void run() {\n      for (int i = 0; i < 10; i++) System.out.print(x);\n    }\n\n    public static void main(String args[]) throws InterruptedException {\n      Fir obj1 = new Fir(1);\n      Fir obj2 = new Fir(2);\n      Thread t1 = new Thread(obj1);\n      Thread t2 = new Thread(obj2);\n      t1.start();\n      t2.start();\n      t2.join();\n      System.out.print(3);\n    }\n  }\n\nDup\u0103 executarea programului, poate fi afi\u015fat un num\u0103r format din:\n\n", "answers": [" 10 cifre egale cu 1, 10 cifre egale cu 2 \u0219i o cifr\u0103 egal\u0103 cu 3, cifrele fiind \u00een orice ordine posibil\u0103\n", " 10 cifre egale cu 1, 10 cifre egale cu 2 \u0219i o cifr\u0103 egal\u0103 cu 3, dar toate cifrele egale\ncu 2 se vor afla \u00eenaintea cifrei 3\n", " 10 cifre egale cu 1, 10 cifre egale cu 2 \u0219i o cifr\u0103 egal\u0103 cu 3, dar toate cifrele egale cu 1 sau 2 se vor afla \u00eenaintea cifrei 3\n", " 10 cifre egale cu 1, urmate de 10 cifre egale cu 2 \u0219i la sf\u00e2r\u0219it o cifr\u0103 egal\u0103 cu 3\n"], "correct_answers": [2]}, {"question": " Consider\u0103m urm\u0103torul program Java:\n\n  class Sir {\n    private String sir;\n\n    public Sir(String sir) {\n      this.sir = sir;\n    }\n    public void modificaSir(String sir) {\n      this.sir = sir;\n    }\n    public void modificaSir(Sir sir) {\n      sir = new Sir(\"Mihai\");\n    }\n    public String getSir() {\n      return sir;\n    }\n  }\n\npublic class Test {\n  public static void main(String[] args) {\n    Sir s = new Sir(\"Ion\");\n    Sir t = new Sir(\"Alex\");\n    s.modificaSir(\"Matei\");\n    t.modificaSir(new Sir(\"Dan\"));\n    s.modificaSir(t);\n    System.out.println(s.getSir() + \" \" + t.getSir());\n  }\n}\n\nDup\u0103 executarea programului, va fi afi\u015fat\u0103 valoarea:\n\n", "answers": [" Matei Dan \n", " Dan Dan \n", " Matei Alex \n", " Alex Dan\n"], "correct_answers": [2]}, {"question": " Prin modalitatea sa de tratare a excep\u0163iilor, Java ofer\u0103 urm\u0103toarele avantaje fa\u0163\u0103 demecanismul tradi\u0163ional de tratare a erorilor:\n\n", "answers": [" exist\u0103 o metod\u0103 care se ocup\u0103de acest lucru;\n", " separarea codului pentru tratarea unei erori de codul \u00een care ea poate sa apar\u0103;\n", " propagarea unei erori p\u00e2na la un analizor de excep\u0163ii corespunz\u0103tor;\n", " gruparea erorilor dupa tipul lor.\n"], "correct_answers": [1, 2, 3]}, {"question": " O subclas\u0103 a unei clase abstracte poate fi instan\u0163iat\u0103 numai dac\u0103:\n\n", "answers": [" se folose\u015fte cuvantul cheie abstract;\n", " suprascrie fiecare metod\u0103 declarat\u0103 abstract\u0103 \u00een superclasa sa \u015fi furnizeaza implement\u0103ri pentru toate acestea;\n", " se folose\u015fte mo\u015ftenirea multipl\u0103;\n", " subclas\u0103 abstract\u0103 nu poate fi instan\u0163iat\u0103.\n"], "correct_answers": [1]}, {"question": " Care este rolul declara\u0163iilor\nimport ?\n\n", "answers": ["  Permite referireaclaselorf\u0103r\u0103utilizareade prefixe;\n", " Permite importul imaginilor folosite;\n", " Elimin\u0103 necesitatea declar\u0103rii variabilelor;\n", " Elimin\u0103 apelurile directe ale func\u0163iilor f\u0103r\u0103 clase.\n"], "correct_answers": [0]}, {"question": " Consider\u0103m urm\u0103torul program Java:\n  class Calcul_1 {\n    void calcul(int a, int b) {\n      System.out.print(a + b + \" \");\n    }\n  }\n\nclass Calcul_2 extends Calcul_1 {\n  void calcul(int a, int b) {\n    System.out.print(a - b + \" \");\n  }\n}\n\nclass Calcul_3 extends Calcul_2 {\n  void calcul(int a, int b) {\n    System.out.print(a * b + \" \");\n  }\n}\npublic class Test {\n  public static void main(String[] args) {\n    Calcul_1 x = new Calcul_3();\n    x.calcul(1, 2);\n\n    Calcul_2 y = (Calcul_2) x;\n    y.calcul(3, 4);\n\n    Calcul_3 z = (Calcul_3) y;\n    z.calcul(5, 6);\n  }\n}\n\nDup\u0103 executarea programului, va fi afi\u015fat\u0103 valoarea:\n\n", "answers": [" 2 12 30 \n", " 3 - 1 30 \n", " 3 7 11 \n", " 2 7 11\n"], "correct_answers": [0]}, {"question": " Care dintre liniile de mai jos realizeaz\u0103 atribuirea \u015firului\u201e Hello Java\u201d variabilei s ?\n\n", "answers": [" String s = \"Hello Java\";\n", " String s[] = \"Hello Java\";\n", " new String s = \"Hello Java\";\n", " String s = new String(\"Hello Java\");\n"], "correct_answers": [0, 3]}, {"question": " Ce se afiseaz\u0103 dac\u0103 se execut\u0103 urm\u0103torul cod Java:\n  String s = new String(\"Computer\");\nif (s == \"Computer\")\n  System.out.println(\"Equal A\");\nif (s.equals(\"Computer\"))\n  System.out.println(\"Equal B\");\n\n", "answers": [" Eroare la complilare, deoarece operatorul == nu se poate aplica pentru tipul String\n", " Se afiseaz\u0103 mesajul\u201c Equal A\u201d\n", " Se afiseaz\u0103 mesajul\u201c Equal B\u201d\n", " Se afi\u015feaz\u0103 ambele mesaje, \u201cEqual A\u201d, repsectiv\u201c Equal B\u201d\n"], "correct_answers": [2]}, {"question": " \u00cen Java, metodaclone() a clasei Object\n\n", "answers": [" Creeaza un obiect nou al clasei folosind constructorul implicit\n", " Creeaza \u015fi returneaz\u0103 o copie a obiectului curent\n", " Returneaza codul asociat constructorului implicit\n", " Testeaz\u0103 dac\u0103 obiectul specificat este o clon\u0103 a obiectului current\n"], "correct_answers": [1]}, {"question": " Un fir de executare Java este\n", "answers": [" O instan\u0163\u0103 a unei clase derivate din clasa Thread\n", " O instan\u0163\u0103 a unei clase care implementeaz\u0103 interfa\u0163a Runnable\n", " Fie un obiect al unei clase a carei superclas\u0103 este clasa Thread, fie un obiect al unei clase care implementeaz\u0103 interfata Runnable\n"], "correct_answers": [0, 1, 2]}, {"question": " Fie urm\u0103torul program Java:\n\n  public class Asignare {\n    public static void main(String args[]) {\n      int a = 3;\n      int b = (a = 2) * a;\n      int c = b * (b = 5);\n      System.out.println(\"a = \" + a + \", b = \" + b + \", c = \" + c);\n    }\n  }\n\nCe va afi\u015fa acesta la execu\u0163ie ?\n", "answers": [" a = 2, b = 4, c = 20\n", " a = 2, b = 5, c = 20\n", " a = 2, b = 5, c = 25\n", " a = 3, b = 6, c = 30\n"], "correct_answers": [1]}, {"question": " Urmatorul subprogram Java:\n\n  int as = 3, bs = 2, cs = 4;\nSystem.out.print(((as < bs++) & (cs++ < bs)) + \" \");\nSystem.out.println(as + \" \" + bs + \" \" + cs);\nSystem.out.print(((as < bs++) && (os++ < bs++)) + \" \");\nSystem.out.println(as + \" \" + bs + \" \" + cs);\n\nAfi\u015feaz\u0103:\n\n", "answers": [" Eroare la compilare: nu se poate aduna o valoare booleana cu un String;\n", " Subprogramul se compileaz\u0103 \u015fi la execu\u0163ie afiseaz\u0103: false 3 3 5 false 3 4 4\n", " Subprogramul se compileaza \u015fi la execu\u0163ie afiseaz\u0103: false 3 3 5 false 3 4 5\n", " Subprogramul se compileaza \u015fi la execu\u0163ie afiseaz\u0103 false 3 3 5 false 3 5 6\n"], "correct_answers": [2]}, {"question": " Consider\u0103m urm\u0103torul program Java:\n  public class test {\n    public static void main(String args[]) {\n      int v[] = {\n        -2,\n        4,\n        -5,\n        -6,\n        0,\n        2\n      }, suma = 0, i;\n      for (i = 0; i < 5; i++)\n        if (v[i] < -2) suma += v[i];\n      System.out.println(suma);\n    }\n  }\n\nDup\u0103 executarea programului, pe ecran se va afi\u015fa:\n\n", "answers": [" - 7\n", " 0\n", " -11\n", " - 13\n"], "correct_answers": [2]}, {"question": " Secven\u0163a uramatoare:\n\n  public class test {\n    public static void main(String args[]) {\n      String sir = \"Programare in Java, C++ este usoara\";\n      String atom[] = sir.split(\" \");\n      System.out.println(atom.length);\n    }\n  }\nAfiseaz\u0103:\n", "answers": [" Eroare la compliare pentru ca nu se specifica numarul de elemente ale tabloului atom\n", " 6\n", " 7\n", " 8\n"], "correct_answers": [1]}, {"question": " Secven\u0163a uramatoare:\n\n  public class test {\n    public static void main(String args[]) {\n      String sir = \"Programare in Java, C++ este usoara\";\n      String atom[] = sir.split(\" \");\n      System.out.println(atom[0].length());\n    }\n  }\n\nAfiseaz\u0103:\n", "answers": [" Eroare la compliare pentru ca nu se specifica numarul de elemente ale tabloului atom\n", " 6\n", " 10\n", " 9\n"], "correct_answers": [2]}, {"question": " Ce se va afi\u015fa la execu\u0163ia urmatorului program Java ?\n  interface I1 {\n    float x = 2.3 f;\n  }\npublic class Test implements I1 {\n  public static void main(String[] args) {\n    System.out.print(x + \" \");\n    x = 6.7 f;\n    System.out.print(x);\n  }\n}\n", "answers": [" Va aparea eroare la compilare deoarece valoarea variabilei x nu se mai poatemodifica;\n", " La execu\u0163ie se va afi\u015fa: 2.3 f 6.7 f;\n", " La execu\u0163ie se va afi\u015fa: 2.3 f 2.3 f;\n", " La execu\u0163ie se va afi\u015fa: 2.3 6.7;\n"], "correct_answers": [0]}, {"question": " Urmatorul program Java:\n\n  class C1 {\n    int x = 1;\n    void f(int x) {\n      this.x = x;\n    }\n    int getX_C1() {\n      return x;\n    }\n  }\nclass C2 extends C1 {\n  float x = 5.0 f;\n  int f(int x) {\n    super.f((int) x);\n  }\n  float getX_C2() {\n    return x;\n  }\n}\npublic class Test {\n  public static void main(String[] args) {\n    C2 obiect = new C2();\n    obiect.f(4);\n    System.out.print(obiect.getX_C2() + \" \");\n    System.out.println(obiect.getX_C1());\n  }\n}\n\nAfi\u015feaz\u0103:\n\n", "answers": [" Programul este corect \u015fi va afi\u015fa la execu\u0163ie 5 4;\n", " Programul este correct \u015fi va afi\u015fa la execu\u0163ie 4.0 4;\n", " Va aparea eroare la compilare deoarece \u00een clasa C2 s - a suprascris gresit atributul x din clasa C1;\n", " Va aparea eroare la compilare deoarece metoda suprascris\u0103 f() din clasa C2 intoarce un tip diferit de void;\n"], "correct_answers": [3]}, {"question": " O subclas\u0103 a unei clase abstracte poate fi instan\u0163iat\u0103 numai dac\u0103:\n", "answers": [" Se folose\u015fte cuvantul cheie abstract;\n", " Suprascrie fiecare metod\u0103 declarat\u0103 abstract\u0103 \u00een superclasa sa, \u015fi furnizeaza implementari pentru toate acestea;\n", " Se folose\u015fte mo\u015ftenirea multipl\u0103;\n", " O subclas\u0103 abstract\u0103 nu poate fi instan\u0163iat\u0103;\n"], "correct_answers": [1]}, {"question": " Urmatorul program Java:\n\n  class C1 {\n    int x = 1;\n    void f(int x) {\n      this.x = x;\n    }\n    int getX_C1() {\n      return x;\n    }\n  }\nclass C2 extends C1 {\n  float x = 5.0 f;\n  void f(int x) {\n    super.f((int) x);\n  }\n  float getX_C2() {\n    return x;\n  }\n}\npublic class Test {\n  public static void main(String[] args) {\n    C2 obiect = new C2();\n    obiect.f(4);\n    System.out.print(obiect.getX_C2() + \" \");\n    System.out.println(obiect.getX_C1());\n  }\n}\n\nAfi\u015feaz\u0103:\n\n", "answers": [" Programul este corect \u015fi va afi\u015fa la execu\u0163ie 5.0 4;\n", " Programul este correct \u015fi va afi\u015fa la execu\u0163ie 4.0 4;\n", " Va aparea eroare la compilare deoarece \u00een clasa C2 s - a suprascris gresit atributul x din clasa C1;\n", " Programul este correct \u015fi va afi\u015fa la execu\u0163ie 5.0 5;\n"], "correct_answers": [0]}, {"question": " Tipurile referin\u021ba \u00een Java sunt:\n", "answers": [" tabloul, clasa, interfa\u021ba\n", " clasa, interfata\n", " int, flout, double, char, String\n", " String si null\n"], "correct_answers": [0]}, {"question": " Secven\u021ba urm\u0103toare:\n\n  public class numar_43_nou {\n    public static void main(String args[]) {\n      String sir = \"Examen\";\n      sir.toUpperCase();\n      System.out.println(sir);\n    }\n  }\nAfi\u0219eaz\u0103:\n\n", "answers": [" EXAMEN\n", " Examen\n", " eXamen\n", " Examen\n"], "correct_answers": [3]}, {"question": " Secven\u021ba ur\u0103toare:\n\n  public class numar_44_nou {\n    public static void main(String args[]) {\n      String sir1 = \"Programare in Java\";\n      String sir2 = sir1.substring(4, 8);\n      System.out.println(sir2.toUpperCase());\n    }\n  }\n\nAfi\u0219eaz\u0103:\n", "answers": [" ogramare\n", " rama\n", " RAMA\n", " Java\n"], "correct_answers": [2]}, {"question": " Secven\u021ba ur\u0103toare:\n\n  public class Test {\n    public static void main(String args[]) {\n      int numar = 1;\n      for (int x = 0; x < 4; x++) numar = numar << 1;\n      System.out.println(numar);\n    }\n  }\n\nAfi\u0219eaz\u0103:\n", "answers": [" 16 b) 32\n", " 8\n", " 3\n"], "correct_answers": [0]}, {"question": " O clas\u0103 abstract\u0103 \u00een Java:\n\n", "answers": [" con\u021bine doar metode abstracte\n", " con\u021bine metode abstarcte, dar poate con\u021bine \u0219i metode definite\n", " poate fi instan\u021biat\u0103\n", " nu poate fi instan\u021biat\u0103, dar se pot definii referin\u021be c\u0103tre acesta"], "correct_answers": [1, 3]}, {"question": " Secve\u0163a uramatoare:\n\n  public class test {\n    public static void main(String args[]) {\n      String sir = \"Programare in Java, C++ este usoara\";\n      String atom[] = sir.split(\"[ ,]\");\n      System.out.println(atom.length);\n    }\n  }\nAfiseaz\u0103:\n", "answers": [" Eroare la compliare pentru ca nu se specifica numarul de elemente ale tabloului atom\n", " 2\n", " 6\n", " 5\n"], "correct_answers": [1]}, {"question": " O clas\u0103 declarat\u0103 final\n\n", "answers": [" clasa nu poate fi instan\u021biat\u0103\n", " orice cod exterior are acces la codul clasei\n", " implementeaz\u0103 o interfa\u021b\u0103\n", " nu poate avea subclase\n"], "correct_answers": [3]}, {"question": " Compozi\u021biareprezint\u0103\n", "answers": ["O rela\u021bie de tip IS - A\n", "O rela\u021bie de tip Can Do\n", " orela\u021bie de tip HAS - A.\n", "Niciorela\u021bie\n"], "correct_answers": [2]}, {"question": " Se consider\u0103 urm\u0103torul fragment de cod:\n\n  for (int i = 0; i < 2; i++) {\n    for (int j = 0; j < 3; j++) {\n      if (i == j) {\n        continue;\n      }\n      System.out.println(\u201ci = \u201d+i + \u201dj = \u201d+j);\n    }\n  }\n\nCare linii vor face parte din output ?\n", "answers": [" i = 0 j = 0\n", " i = 0 j = 1\n", " i = 0 j = 2\n", " i = 1 j = 0\n", " i = 1 j = 1"], "correct_answers": [1, 2, 3]}, {"question": " Fie urm\u0103torul program Java:\n  class Tablou {\n    int[] met(int[] a) {\n      a[0] = -a[0];\n      a = new int[a.length];\n      a[0] = 1;\n      return a;\n    }\n  }\npublic class Test {\n  public static void main(String[] args) {\n    int a[] = {\n      1,\n      2,\n      3,\n      4,\n      5\n    };\n    int b[] = new Tablou().met(a);\n    int s = 0;\n    for (int i = 0; i < a.length; i++) s = s + a[i] +\n      b[i];\n\n  }\n}\nSystem.out.println(s);\n\nDup\u0103 executarea programului, va fi afi\u015fat\u0103 valoarea:\n\n", "answers": [" 30 \n", " 14 \n", " 28 \n", " 15\n"], "correct_answers": [1]}, {"question": " Consider\u0103m urm\u0103torul program Java:\n  class A {\n    public int x = 1;\n    public A() {\n      x++;\n    }\n  }\nclass B extends A {\n  public B() {\n    x++;\n  }\n}\nclass C extends B {\n  public int x = 1;\n  public C() {\n    x++;\n  }\n}\npublic class Test {\n  public static void main(String[] args) {\n    B b = new B();\n    C c = new C();\n    System.out.println(b.x + \" \" + c.x);\n  }\n}\n\nDup\u0103 executarea programului, va fi afi\u015fat\u0103 valoarea:\n\n", "answers": [" 3 3 \n", " 3 4 \n", " 2 2 \n", " 3 2\n"], "correct_answers": [3]}, {"question": " Consider\u0103m urm\u0103torul program Java:\n  class C1 {\n    int x = 1;\n    int f(int x) {\n      return this.x + x;\n    }\n    int f(int x, int y) {\n      return this.x + y;\n    }\n  }\nclass C2 extends C1 {\n  int f(int x) {\n    return this.x;\n  }\n}\npublic class Test {\n  public static void main(String[] args) {\n    C1 ob = new C2();\n    System.out.println(ob.f(1) + ob.f(2, 2));\n  }\n}\n\nDup\u0103 executarea programului, va fi afi\u015fat\u0103 valoarea:\n\n", "answers": [" 3 \n", " 6 \n", " 5 \n", " 4\n"], "correct_answers": [3]}, {"question": " Dup\u0103 executarea secven\u021bei de cod\n\nString s = \"Examen\", t = \"Examen\";\nif (s == t) System.out.print(\"A\");\nelse System.out.print(\"B\");\nif (s.equals(t)) System.out.print(\"C\");\nelse System.out.print(\"D\");\n\nse va afi\u015fa:\n\n", "answers": [" AD \n", " BC \n", " AC \n", " BD\n"], "correct_answers": [2]}, {"question": " Fie urm\u0103torul program Java:\n\n  class A {\n    public int x = 0;\n  }\npublic class Test {\n  public static A metoda() {\n    A a = new A();\n    try {\n      a.x += 1;\n      throw new NullPointerException();\n    } catch (Exception e) {\n      a.x += 2;\n    } finally {\n      a.x += 3;\n    }\n    return a;\n  }\n  public static void main(String[] args) {\n    A ob = metoda();\n    System.out.println(ob.x);\n  }\n}\nDup\u0103 executarea programului, se va afi\u015fa:\n\n", "answers": [" 6 \n", " 3 \n", " 4 \n", " Eroare la rulare(excep\u021bie NullPointerException netratat\u0103)\n"], "correct_answers": [0]}, {"question": " Preciza\u021bi care dintre urma\u0103toarele afirma\u021bii sunt adev\u0103rate:\n  I.o interfa\u021b\u0103 poate s\u0103 con\u021bin\u0103 c\u00e2mpuri publice, statice \u0219i finale, respectiv metode\nstatice si metode implicite cu implementare\nII.o \u00eenterfa\u021b\u0103 poate fi instan\u021biat\u0103\nIII.o clas\u0103 poate implementa mai multe interfe\u021be\nIV.mai multe clase pot implementa aceea\u0219i interfa\u021b\u0103\n\n", "answers": [" I, II, IV \n", " I, III, IV \n", " II, III, IV \n", " I, II, III, IV\n"], "correct_answers": [1]}, {"question": " Fie urm\u0103torul program Java:\n  class A {\n    public static String f(String x) {\n      return x + \u201dA\u201d;\n    }\n    public String g(String x) {\n      return x + \u201dB\u201d;\n    }\n  }\n\nclass B extends A {\n  public static String f(String x) {\n    return x + \u201dC\u201d;\n  }\n  public String g(String x) {\n    return x + \u201dD\u201d;\n  }\n}\n\npublic class Test {\n  public static void main(String[] args) {\n    A a = new B();\n    System.out.println(a.f(\u201dA\u201d) + a.g(\u201dC\u201d));\n  }\n}\n\nDup\u0103 executarea programului, se va afi\u015fa:\n\n", "answers": [" AACD \n", " ACCD \n", " AACB \n", " ACDC\n"], "correct_answers": [0]}, {"question": " Un fir de executare \u00een Java se poate defini:\n", "answers": [" printr - o instan\u021b\u0103 a clasei Runnable\n", " printr - o instan\u021b\u0103 a clasei Object\n", " printr - o instan\u021b\u0103 a clasei Thread\n", " printr - o instan\u021b\u0103 a clasei Clone"], "correct_answers": []}]